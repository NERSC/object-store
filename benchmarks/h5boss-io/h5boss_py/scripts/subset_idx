#!/usr/bin/env python
"""
Create an HDF5 file from BOSS data

TODO:
  - include comments in meta/attrs
  - platelist quantities
"""
from __future__ import division, print_function
#from __future__ import absolute_import
#from h5boss.selectmpi import select
#from h5boss.select_c import select
#from h5boss.select import select
from h5boss.select_idx import select
import sys,os
import time
import optparse
import csv
import traceback
import pandas as pd
import numpy as np
import optparse
import argparse
import commands
parser = argparse.ArgumentParser(prog='subset')
parser.add_argument("input",  help="HDF5 input list")
parser.add_argument("output", help="HDF5 output")
parser.add_argument("pmf",    help="Plate/mjd/fiber list in csv")
opts=parser.parse_args()
pmflist = opts.pmf
infiles = opts.input
outfile = opts.output
nproc=1
tstart=time.time()
plates=[]
mjds=[]
fibers=[]
try:
 df = pd.read_csv(pmflist,delimiter=' ',names=["plates","mjds","fibers"],index_col=None,dtype=str)
 df = df.sort(['plates'],ascending=[1])
 plates = list(map(str,df['plates'].values))
 plates_array = np.asarray(plates)
 plates_uni_array = np.unique(plates_array)
 print ("number of unique plates is %d"%plates_uni_array.size)
 mjds = list(map(str,df['mjds'].values))
 fibers = list(map(str,df['fibers'].values))
except Exception as e:
 print("pmf csv read error or not exist:%s"%e,pmflist)
 print("e.g., 1st row of csv should be 'plates mjds fibers'")
infile=[]
try:
 with open(infiles,'rt') as f:
  reader = csv.reader(f)
  infile = list(reader)
  infile = [x for sublist in infile for x in sublist]
except Exception as e:
 print ("input filelist csv read error or not exist: %s"%e,infiles)

print ("Before running selection, parsing costs %.2f"%(time.time()-tstart))
if(len(plates)==0 or len(infile)==0):
  print("pmf or input is empty")
  sys.exit(0)

print ("Input: %d files:"%len(infile),infile[0],"...",infile[-1])
print ("Output: ", outfile)
print ("Running selection...")
tstart=time.time()
try:
 select(infile, outfile, plates, mjds, fibers)
except Exception as e:
 print ("Error in select:")
 traceback.print_exc()
print ("Done selection")
print ("Total selection Cost %.2f"%(time.time()-tstart))
