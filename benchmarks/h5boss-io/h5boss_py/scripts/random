#!/usr/bin/env python
import sys,os
import time
import optparse
import csv
import traceback
import random
import h5py

import optparse
import argparse
parser = argparse.ArgumentParser(prog='random')
parser.add_argument("number",type=int,  help="plates/mjds/fibers sample size")
parser.add_argument("input",  help="text file that contains a list of HDF5 files or path to those HDF5 files")

argvalue=parser.parse_args()
tstart = time.time()

testnumber=argvalue.number
print ("Pick %d plates/mjds/fibers tuple randomly"%testnumber)
infiles=argvalue.input

def findseed(x):
     hdf5files = [os.path.join(root, name)
       for root, dirs, files in os.walk(x)
       for name in files
        if name.endswith("h5") or name.endswith(".hdf5")]
     return hdf5files
def filtername(x):
    import re
    return re.split('/|\.|\n',str(x))[-2] 
def getname(x): 
    infile = map(filtername,x)
    return infile
if os.path.isfile(infiles):
 try:
  with open(infiles,'rb') as f:
   content = f.readlines()
   infiles = [x.strip('\n') for x in content]
 except Exception, e:
  print ("text file open error: %s"%e,infiles)
  traceback.print_exc()
elif os.path.isdir(infiles):
  infile_dir=infiles
  try: 
    infiles=findseed(infile_dir)
  
  except Exception, e:
   print ("couldn't find hdf5 files in %s"%e,infile_dir)
   traceback.print_exc()
print ("Number of hdf5 files: %d"%len(infiles))
infile=getname(infiles)
def filter0(x):
    return str(x).split('.')[0]
def filter1(x):
    try:
       fx=h5py.File(x,'r')
       dk=fx.keys()[0]
       fx.close()
       return dk
    except Exception, e:
      print('fiter1: file broken:',x)
     
def filter2(x):
    try: 
       fx = h5py.File(x,'r')
       plate = fx.keys()[0]
       dp = fx[str(plate)].keys()[0]
       fx.close()
       return dp
    except Exception, e:
      print('filter2:file broken:',x)
infile=map(filter0,infiles)
plates=map(filter1,infiles)
mjds=map(filter2,infiles)
assert(len(plates)==len(mjds))
rd=sorted(random.sample(xrange(0, len(infile)), testnumber))
select_plates=list()
select_mjds=list()
select_fibers=list()
select_files=list()
for i in rd:
    print("plates:",plates[i])
    select_plates.append(str(plates[i]))
    select_mjds.append(str(mjds[i]))
    select_files.append(str(infiles[i]))
print("Plates/Mjds Selected (default=50)",len(select_plates))
for i in range(0,testnumber):
    try:
     print("open:",str(select_files[i]))
     print("select plates: ",select_plates[i])
     print("select mjds: ",select_mjds[i])
     fx = h5py.File(str(select_files[i]),mode='r')
    except Exception,e:
     print("Error in Open:",str(select_files[i]))
    try:
     d_fiber=fx[str(select_plates[i])][str(select_mjds[i])].keys()
     item_fiber='u'
     while not item_fiber.isdigit():
            item_fiber=random.choice(d_fiber)
            print('item_fiber:',item_fiber)
     select_fibers.append(str(item_fiber))
     print("Picked a random fiber ",str(item_fiber)," in ",str(select_files[i]))
    except Exception,e:
      print("Error in fiber selection,d_fiber:",d_fiber)
      select_fibers.append('30')
      print("Picked a random fiber 30 in ",str(select_files[i]))
      traceback.print_exc()
print ("selected plates=",len(select_plates))
print ("selected mjds=",len(select_mjds))
print ("selected fibers=",len(select_fibers))
assert (len(select_fibers)==len(select_mjds))
assert (len(select_fibers)==len(select_plates))
tuple_pmf=zip(select_plates,select_mjds,select_fibers)
tuple_file = 'tuple_file'
plates_file = 'test_plates'
mjds_file = 'test_mjds'
fiber_file = 'test_fibers'
with open(plates_file, "wb") as f:
     #print(["%s\n" % item  for item in select_plates])
    f.writelines(["%s\n" % item  for item in select_plates])
with open(mjds_file,"wb") as f:
    f.writelines(["%s\n" % item  for item in select_mjds])
with open(fiber_file,"wb") as f:
    f.writelines(["%s\n" % item  for item in select_fibers])
with open(tuple_file,"wb") as f:
    f.writelines(["%s\n" % item  for item in tuple_pmf])
print("Saved into CSV files:",plates_file,mjds_file,fiber_file)
tend=time.time()-tstart
print ('Time:%.2f seconds'%tend)
